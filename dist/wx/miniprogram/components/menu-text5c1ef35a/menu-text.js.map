{"version":3,"sources":["webpack:///./src/miniprogram/components/menu-text.mpx?c75a","webpack:///./src/miniprogram/components/menu-text.mpx","webpack:///./src/miniprogram/components/menu-text.mpx?c19d","webpack:///./src/miniprogram/components/menu-text.mpx?ddb3","webpack:///./src/miniprogram/components/menu-text.mpx?df0c"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAC2H;;AAE3H;AACA,mBAAO,CAAC,GAA2a;;AAEnb;AACA,mBAAO,CAAC,GAAoP;;AAE5P;AACA,mBAAO,CAAC,GAAib;;;;;;;;;;;;;;;;;;;;AC6Czb;AACA;AAEA;AACA;AACA;AADA,GADA;AAIA;AACA;AACA;AACA,KAHA;;AAIA;AACA;AACA,KANA;;AAOA;AACA;AACA,KATA;;AAUA;AACA;AACA,KAZA;;AAaA;AACA;AACA;;AAfA,GAJA;AAqBA;AACA;AAAA;;AACA;;AACA;;AACA;AACA;AACA,KANA;;AAOA;AAAA;;AACA;AAAA;AAAA;;AACA;AACA;AACA,0BADA;AAEA;AAFA;AAIA;AACA;;AACA;AACA,KAjBA;;AAkBA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;;AACA;AACA;AACA;AACA,KAzBA;;AA0BA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;;AACA;AACA;AACA;AACA,KAjCA;;AAkCA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;;AACA;AACA;AACA;AACA;;AAzCA,GArBA;;AAgEA,WACA;AACA;;AAlEA,G;;;;;;;AC3DA,uB;;;;;;;ACAA,uB;;;;;;;ACAA,uB","file":"components/menu-text5c1ef35a/menu-text.js","sourcesContent":["global.currentModuleId\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=script&index=0!./menu-text.mpx\"\n\n/* styles */\nrequire(\"!!../../../node_modules/@mpxjs/webpack-plugin/lib/extractor?type=styles&index=0!../../../node_modules/@mpxjs/webpack-plugin/lib/wxss/loader?sourceMap&root=&importLoaders=1&extract=true!../../../node_modules/@mpxjs/webpack-plugin/lib/style-compiler/index?{\\\"moduleId\\\":\\\"m655469d4\\\",\\\"scoped\\\":false,\\\"sourceMap\\\":true}!stylus-loader!../../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=styles&index=0!./menu-text.mpx\")\n\n/* json */\nrequire(\"!!../../../node_modules/@mpxjs/webpack-plugin/lib/extractor?type=json&index=0!../../../node_modules/@mpxjs/webpack-plugin/lib/json-compiler/index?root=!../../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=json&index=0!./menu-text.mpx\")\n\n/* template */\nrequire(\"!!../../../node_modules/@mpxjs/webpack-plugin/lib/extractor?type=template&index=0!../../../node_modules/@mpxjs/webpack-plugin/lib/wxml/wxml-loader?root=!../../../node_modules/@mpxjs/webpack-plugin/lib/template-compiler/index?{\\\"usingComponents\\\":[],\\\"hasScoped\\\":false,\\\"isNative\\\":false,\\\"moduleId\\\":\\\"m655469d4\\\",\\\"projectRoot\\\":\\\"\\\"}!../../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=template&index=0!./menu-text.mpx\")\n\n","<template>\n  <view class=\"menu-text\">\n      <input\n        value=\"{{ activeElement.data }}\" \n        type=\"text\"\n        class=\"input-text\"\n        placeholder=\"请输入文字\" \n        wx:if=\"{{ activeIndex }}\"\n        bindblur=\"textChange\"\n      />\n      <view class=\"input-text\" wx:else bindtap=\"addText\">添加文字</view>\n      <view class=\"item\">\n        <view class=\"label\">透明度</view>\n        <view class=\"content\">\n          <slider\n            bindchange=\"opacityChange\"\n            show-value\n            backgroundColor=\"#eee\"\n            activeColor=\"#ccc\"\n            value=\"{{ opacity }}\"\n            min=\"0\"\n            max=\"1\"\n            step=\"0.1\"\n          />\n        </view>\n      </view>\n      <view class=\"item\">\n        <view class=\"label\">颜色</view>\n        <view class=\"content colors\">\n          <view\n            bindtap=\"fillStyleChange(item)\"\n            class=\"color\"\n            wx:class=\"{{ {active: fillStyle === item} }}\"\n            wx:for=\"{{colors}}\"\n            wx:key=\"item\"\n            wx:style=\"{{{background: item}}}\"\n          />\n        </view>\n      </view>\n      <view class=\"item\">\n        <view class=\"label\">描边</view>\n        <view class=\"content colors\">\n          <view\n            bindtap=\"strokeStyleChange(item)\"\n            class=\"color\"\n            wx:class=\"{{ {active: strokeStyle === item} }}\"\n            wx:for=\"{{ colors }}\"\n            wx:key=\"item\"\n            wx:style=\"{{ {background: item} }}\"\n          />\n        </view>\n      </view>\n  </view>\n</template>\n\n<script>\nimport { createComponent } from '@mpxjs/core'\nimport store from '../store'\n\ncreateComponent({\n  data: {\n    colors: ['#000000', '#ffffff', '#0076B6', '#00A948', '#FFB500', '#FF2929']\n  },\n  computed: {\n    activeElement() {\n      return store.state.elements[store.state.activeIndex]\n    },\n    activeIndex() {\n      return store.state.activeIndex\n    },\n    opacity() {\n      return this.activeIndex ? this.activeElement.opacity : store.state.fontStyle.opacity\n    },\n    fillStyle() {\n      return this.activeIndex ? this.activeElement.fillStyle : store.state.fontStyle.fillStyle\n    },\n    strokeStyle() {\n      return this.activeIndex ? this.activeElement.strokeStyle : store.state.fontStyle.strokeStyle\n    }\n  },\n  methods: {\n    textChange(e) {\n      const text = e.detail.value || '请输入文字'\n      const elements = store.state.elements.slice()\n      elements[store.state.activeIndex].data = text\n      store.commit('setElements', elements)\n    },\n    addText() {\n      const background = store.state.elements.find(e => e.type === 'background')\n      if (!background) {\n        wx.showToast({\n          title: '请先选择背景图',\n          icon: 'none'\n        })\n        return\n      }\n      store.commit('addText')\n    },\n    opacityChange(e) {\n      store.commit('setFontStyle', { key: 'opacity', data: e.detail.value })\n      if (this.activeIndex) {\n        const elements =  store.state.elements.slice()\n        elements[this.activeIndex].opacity = e.detail.value\n        store.commit('setElements', elements)\n      }\n    },\n    fillStyleChange(e) {\n      store.commit('setFontStyle', { key: 'fillStyle', data: e })\n      if (this.activeIndex) {\n        const elements =  store.state.elements.slice()\n        elements[this.activeIndex].fillStyle = e\n        store.commit('setElements', elements)\n      }\n    },\n    strokeStyleChange(e) {\n      store.commit('setFontStyle', { key: 'strokeStyle', data: e })\n      if (this.activeIndex) {\n        const elements =  store.state.elements.slice()\n        elements[this.activeIndex].strokeStyle = e\n        store.commit('setElements', elements)\n      }\n    }\n  },\n  ready() {\n    // this.initCanvas()\n  }\n})\n</script>\n\n<style lang=\"stylus\">\n.menu-text\n  display flex\n  flex-direction column\n  justify-content center\n  height 100%\n  position relative\n  padding 0 20rpx\n  \n  .input-text\n    box-sizing border-box\n    text-align center\n    width 100%\n    font-size 40rpx\n    margin-bottom 20rpx\n    font-weight bold\n    color #999\n    border 1rpx dashed #ccc\n    border-radius 5rpx\n    padding 10rpx\n    height 90rpx\n\n  .item\n    height 80rpx\n    display flex\n    align-items center\n    width 100%\n\n    .label\n      color #1E3063\n      font-size 28rpx\n      font-weight bold\n      width 120rpx\n    \n    .content\n      width calc(100% - 120rpx)\n    \n    .colors\n      padding 0 10rpx\n      display flex\n      justify-content space-between\n      \n      .color\n        box-sizing border-box\n        width 48rpx\n        height 48rpx\n        border-radius 50%\n        border 4rpx solid #eee\n\n      .active \n        border-color #1E3063\n</style>\n\n<script type=\"application/json\">\n  {\n    \"component\": true\n  }\n</script>\n","// removed by extractor","// removed by extractor","// removed by extractor"],"sourceRoot":""}