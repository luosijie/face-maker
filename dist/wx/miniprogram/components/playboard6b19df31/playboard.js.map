{"version":3,"sources":["webpack:///./src/miniprogram/components/playboard.mpx?05ed","webpack:///./src/miniprogram/components/playboard.mpx","webpack:///./src/miniprogram/components/playboard.mpx?7232","webpack:///./src/miniprogram/components/playboard.mpx?b189","webpack:///./src/miniprogram/components/playboard.mpx?9b68"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAC2H;;AAE3H;AACA,mBAAO,CAAC,GAA2a;;AAEnb;AACA,mBAAO,CAAC,GAAoP;;AAE5P;AACA,mBAAO,CAAC,GAAib;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGzb;AACA;AACA;AACA;AACA,cADA;AACA;AACA,gBAFA;AAEA;AACA,kBAHA;AAGA;AACA,kBAJA;AAIA;AACA,cALA,CAKA;;AALA;AAQA;AACA;AACA,oBADA;AAEA,uBAFA;AAGA,kBAHA;AAIA;AACA,gBADA;AAEA,iBAFA;AAGA,kBAHA;AAIA;AAJA;AAJA,GADA;AAYA;AACA;AACA;AACA,KAHA;;AAIA;AACA;AACA,KANA;;AAOA;AACA;AACA,KATA;;AAUA;AACA;AACA,KAZA;;AAaA;AACA;AACA,KAfA;;AAgBA;AACA;AACA;;AAlBA,GAZA;AAgCA;AACA;AACA;AACA;AACA,KAJA;;AAKA;AACA;AACA,KAPA;;AAQA;AACA;AACA;;AAVA,GAhCA;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAXA,CAYA;;AACA;AACA;AACA;AACA;AACA;AACA,KAtCA;;AAuCA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,mCADA,CAEA;;AACA;AACA;AACA;;AACA;AACA;AACA,SARA,CASA;;;AACA;AACA;AACA,SAZA,CAaA;;;AACA;AACA;AACA;AACA;AACA,KA/DA;;AAgEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDACA,CADA,EAEA,CAFA,EAGA,sBAHA,EAIA,sBAJA,EAKA,UALA;AAOA,yDACA,sCADA,IAEA,+DAFA,IAGA,8DAHA,GAIA,aAJA,GAKA,IALA;AAMA,KAtFA;;AAuFA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,OALA,MAKA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,KA7GA;;AA8GA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,wCADA,CAEA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,uMACA,WADA;AAEA,uCAFA;AAGA;AAHA;;AAKA;AACA;AACA;AACA;AACA,SAHA,MAGA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,OAnCA,CAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA,OAHA,MAGA;AACA;AACA;AACA,OAHA,MAGA;AACA;AACA;AACA;;AACA;AACA,KAzKA;;AA0KA;AACA;AACA;AACA;AACA;AACA;AACA,KAhLA;;AAiLA;AACA;AACA;AACA,KApLA;;AAqLA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA,KAjMA;;AAkMA;AACA;AAAA;;AACA;AACA,kCACA,wEACA,+CADA,EACA,CADA,CADA;AAIA,gCACA,2FADA;AAGA;;AACA;;AACA;AACA;AACA;AACA;AACA,0DAfA,CAgBA;;AACA;AACA,KArNA;;AAsNA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA,qCADA;AAEA;AAFA;AAIA;AACA;AACA;AACA;;AACA;;AACA,gDAbA,CAcA;;AACA,2DAfA,CAgBA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,KApPA;;AAqPA;AACA;AACA;AACA,mBADA;AAEA,0BAFA;;AAGA;AACA;AACA;AACA;AACA;;AAPA;AASA,KAhQA;;AAiQA,wBACA;AACA,KAnQA;;AAoQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDADA;AAEA;AAFA;AAIA,KArRA;;AAsRA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBADA,GACA,2BADA;AAEA,sBACA,MADA,CACA,SADA,EAEA,MAFA,CAEA;AAAA;AAAA;AAAA,iBAFA,EAGA,IAHA;AAAA,iNAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kCADA,GACA,WADA;AAEA,+BAFA,GAEA,uBAFA;AAGA;AACA,iGAJA,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAhBA;AAAA,mCAiBA,yGAjBA;;AAAA;AAiBA,uCAjBA;AAkBA;AAEA;AACA;;AACA;;AACA;;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHA;;AAAA;AAAA;AAAA;AAAA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA,KArTA;;AAsTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArUA;;AAsUA;AACA;AACA;AACA;AACA;AACA,iCALA,CAMA;;AACA;AACA,0FARA,CASA;;AACA,gIAVA,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,KAzVA;;AA0VA;AACA;AACA;AACA;AACA,oDAHA,CAIA;;AACA;AACA;AACA,mCAPA,CAQA;;AACA;AACA;AACA;AACA;AACA;AACA,OAdA,CAeA;;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AAlXA,GA5CA;;AAgaA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,mBADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAlaA,G;;;;;;;ACzBA,uB;;;;;;;ACAA,uB;;;;;;;ACAA,uB","file":"components/playboard6b19df31/playboard.js","sourcesContent":["global.currentModuleId\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=script&index=0!./playboard.mpx\"\n\n/* styles */\nrequire(\"!!../../../node_modules/@mpxjs/webpack-plugin/lib/extractor?type=styles&index=0!../../../node_modules/@mpxjs/webpack-plugin/lib/wxss/loader?sourceMap&root=&importLoaders=1&extract=true!../../../node_modules/@mpxjs/webpack-plugin/lib/style-compiler/index?{\\\"moduleId\\\":\\\"m475e9226\\\",\\\"scoped\\\":false,\\\"sourceMap\\\":true}!stylus-loader!../../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=styles&index=0!./playboard.mpx\")\n\n/* json */\nrequire(\"!!../../../node_modules/@mpxjs/webpack-plugin/lib/extractor?type=json&index=0!../../../node_modules/@mpxjs/webpack-plugin/lib/json-compiler/index?root=!../../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=json&index=0!./playboard.mpx\")\n\n/* template */\nrequire(\"!!../../../node_modules/@mpxjs/webpack-plugin/lib/extractor?type=template&index=0!../../../node_modules/@mpxjs/webpack-plugin/lib/wxml/wxml-loader?root=!../../../node_modules/@mpxjs/webpack-plugin/lib/template-compiler/index?{\\\"usingComponents\\\":[],\\\"hasScoped\\\":false,\\\"isNative\\\":false,\\\"moduleId\\\":\\\"m475e9226\\\",\\\"projectRoot\\\":\\\"\\\"}!../../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=template&index=0!./playboard.mpx\")\n\n","<template>\n  <view class=\"playboard\">\n    <canvas\n      type=\"2d\"\n      id=\"canvas\"\n      class=\"canvas\"\n      bindtouchstart=\"touchstart\"\n      bindtouchmove=\"touchmove\"\n      bindtouchend=\"touchend\"\n    />\n  </view>\n</template>\n\n<script>\nimport { createComponent } from '@mpxjs/core'\nimport store from '../store'\nimport loadImage from '../utils/loadImage'\nconst ACTION_TYEP = {\n  MOVE: 'MOVE',     // 移动\n  SCALE: 'SCALE',   // 缩放\n  ROTATE: 'ROTATE', // 旋转\n  DELETE: 'DELETE', // 旋转\n  NULL: 'NULL'      // 空闲\n}\n\ncreateComponent({\n  data: {\n    startTouches: [],\n    startSelected: null,\n    actionType: '',\n    image: {\n      move: null,\n      scale: null,\n      delete: null,\n      rotate: null\n    }\n  },\n  computed: {\n    mode() {\n      return store.state.mode\n    },\n    canvas() {\n      return store.state.canvas\n    },\n    ctx() {\n      return store.state.ctx\n    },\n    elements() {\n      return store.state.elements\n    },\n    activeIndex() {\n      return store.state.activeIndex\n    },\n    dpr() {\n      return wx.getSystemInfoSync().pixelRatio\n    }\n  },\n  watch: {\n    elements() {\n      console.log('canvas elements change', this.elements)\n      this.renderCanvas()\n    },\n    mode() {\n      this.renderCanvas()\n    },\n    activeIndex() {\n      this.renderCanvas()\n    }\n  },\n  methods: {\n    /**\n     * 绘制图片\n     * @param { Object } ele canvas元素\n     */\n    drawImage(ele) {\n      this.ctx.save()\n      const width = ele.width\n      const height = ele.height\n      const centerX = ele.left + ele.width / 2\n      const centerY = ele.top + ele.height / 2\n      this.ctx.translate(centerX, centerY)\n      this.ctx.rotate(ele.rotate)\n      this.ctx.drawImage(ele.data, ele.left - centerX, ele.top - centerY, width, height)\n      this.ctx.restore()\n    },\n    /**\n     * 绘制文字\n     * @param { Object } ele canvas元素\n     */\n    drawText(ele) {\n      this.ctx.save()\n      const width = ele.size * ele.data.length\n      const height = ele.size\n      const centerX = ele.left + width / 2\n      const centerY = ele.top + height / 2\n      this.ctx.translate(centerX, centerY)\n      this.ctx.rotate(ele.rotate)\n      this.ctx.font = `${ele.size}px bold sans-serif`\n      this.ctx.globalAlpha = ele.opacity\n      this.ctx.fillStyle = ele.fillStyle\n      this.ctx.strokeStyle = ele.strokeStyle\n      // this.ctx.lineWidth = 2\n      this.ctx.textBaseline = 'top'\n      console.log('draw-text', ele)\n      this.ctx.fillText(ele.data, ele.left - centerX, ele.top - centerY)\n      this.ctx.strokeText(ele.data, ele.left - centerX, ele.top - centerY)\n      this.ctx.restore()\n    },\n    // 画布渲染函数\n    renderCanvas() {\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height)\n      this.drawGrid()\n      console.log('draw-background', this.background)\n      if (this.background) this.drawImage(this.background)\n      for (let i = 0; i < this.elements.length; i++) {\n        const ele = this.elements[i]\n        // 渲染背景\n        if (ele.type === 'background') {\n          this.drawImage(ele)\n        }\n        if (ele.type === 'sticker') {\n          this.drawImage(ele)\n        }\n        // 渲染文字\n        if (ele.type === 'text') {\n          this.drawText(ele)\n        }\n        // 选中元素添加控制元件\n        if (this.activeIndex === i) {\n          this.initController(ele)\n        }\n      }\n    },\n    /**\n     * 检测鼠标是否与物体发生碰撞\n     * @param { Number } x 鼠标坐标X\n     * @param { Number } y 鼠标坐标Y\n     * @param { Object } y canvas元素\n     * @return { Boolean } 是否发生碰撞\n     */\n    isCollided(x, y, ele) {\n      const controllerSize = this.convert2ControllerSize(ele)\n      const unrotatedSize = this.convert2unrotatedSize(\n        x,\n        y,\n        controllerSize.centerX,\n        controllerSize.centerY,\n        ele.rotate\n      )\n      return unrotatedSize.left > controllerSize.left &&\n        unrotatedSize.top > controllerSize.top &&\n        unrotatedSize.left < controllerSize.left + controllerSize.width &&\n        unrotatedSize.top < controllerSize.top + controllerSize.height\n        ? unrotatedSize\n        : null\n    },\n    /**\n     * 将canvas尺寸转为控制点的尺寸\n     * @param { Object } ele canvas元素\n     * @return { Object } 坐标集合\n     */\n    convert2ControllerSize(ele) {\n      let left, top, width, height, centerX, centerY, rotate\n      if (ele.type === 'text') {\n        left = ele.left - 5\n        top = ele.top - 5\n        width = ele.size * ele.data.length + 10\n        height = ele.size + 10\n      } else {\n        left = ele.left\n        top = ele.top\n        width = ele.width\n        height = ele.height\n      }\n      rotate = ele.rotate\n      centerX = left + width / 2\n      centerY = top + height / 2\n      return { left, top, width, height, rotate, centerX, centerY }\n    },\n    touchstart(e) {\n      if (!this.elements.length) return\n      this.actionType = ACTION_TYEP.NULL\n      this.startTouches = e.touches\n      let collidedEle = this.elements[0]\n      let collided\n      for (let i = this.elements.length - 1; i > 0; i--) {\n        const selected = this.elements[i]\n        // 检测鼠标是否与canvas元素发生碰撞\n        collided = this.isCollided(e.touches[0].x, e.touches[0].y, selected)\n        if (collided) {\n          console.log('碰撞成功', collidedEle)\n          collidedEle = selected\n          store.commit('setActiveIndex', i)\n          store.commit('setMode', collidedEle.type)\n          break\n        }\n      }\n      const controllerSize = this.convert2ControllerSize(collidedEle)\n      this.startSelected = {\n        ...collidedEle,\n        centerX: controllerSize.centerX,\n        centerY: controllerSize.centerY\n      }\n      if (!collided) {\n        if (e.touches.length === 1) {\n          console.log('单指触发')\n          this.actionType = ACTION_TYEP.MOVE\n        } else if (e.touches.length === 2) {\n          console.log('双指触发')\n          this.actionType = ACTION_TYEP.SCALE\n        }\n        store.commit('setActiveIndex', null)\n        this.renderCanvas()\n        return\n      }\n      // TODO：功能未完善\n      // if (Math.sqrt((collided.left - controllerSize.left) ** 2 + (collided.top - controllerSize.top) ** 2) < 20) {\n      //   console.log('移动模式')\n      //   this.actionType = ACTION_TYEP.MOVE\n      // } else if (Math.sqrt((collided.left - controllerSize.left) ** 2 + (collided.top - controllerSize.top - controllerSize.height) ** 2) < 20) {\n      //   console.log('缩放模式')\n      //   this.actionType = ACTION_TYEP.SCALE\n      // } else if (Math.sqrt((collided.left - controllerSize.left - controllerSize.width) ** 2 + (collided.top - controllerSize.top) ** 2) < 20) {\n      //   console.log('删除模式')\n      //   this.actionType = ACTION_TYEP.DELETE\n      //   this.handleDelete()\n      // } else\n      if (Math.sqrt((collided.left - controllerSize.left - controllerSize.width) ** 2 + (collided.top - controllerSize.top - controllerSize.height) ** 2) < 20) {\n        console.log('旋转模式')\n        this.actionType = ACTION_TYEP.ROTATE\n      } else if (e.touches.length === 1) {\n        console.log('单指触发')\n        this.actionType = ACTION_TYEP.MOVE\n      } else if (e.touches.length === 2) {\n        console.log('双指触发')\n        this.actionType = ACTION_TYEP.SCALE\n      }\n      this.renderCanvas()\n    },\n    touchmove(e) {\n      console.log(this.actionType)\n      if (this.activeIndex === null && this.mode !== 'background') return\n      if (this.actionType === ACTION_TYEP.ROTATE) this.handleRotate(e)\n      if (this.actionType === ACTION_TYEP.MOVE) this.handleMove(e)\n      if (this.actionType === ACTION_TYEP.SCALE) this.handleScale(e)\n    },\n    touchend(e) {\n      this.actionType = ACTION_TYEP.NULL\n      console.log('touch-end', e)\n    },\n    // 移动事件绑定函数\n    handleMove(e) {\n      console.log('mouse-move', e)\n      if (e.touches.length > 1) return\n      const x = e.touches[0].x\n      const y = e.touches[0].y\n      const dx = this.startTouches[0].x - x\n      const dy = this.startTouches[0].y - y\n      const elements = this.elements.slice()\n      elements[this.activeIndex || 0].left = this.startSelected.left - dx\n      elements[this.activeIndex || 0].top = this.startSelected.top - dy\n      store.commit('setElements', elements)\n    },\n    // 缩放事件绑定函数\n    handleScale(e) {\n      if (e.touches.length !== 2 || this.mode !== 'background') return\n      const startLength = Math.sqrt(\n        (this.startTouches[0].x - this.startTouches[1].x) ** 2 +\n          (this.startTouches[0].y - this.startTouches[1].y) ** 2\n      )\n      const endLength = Math.sqrt(\n        (e.touches[0].x - e.touches[1].x) ** 2 + (e.touches[0].y - e.touches[1].y) ** 2\n      )\n      const scale = endLength / startLength\n      const elements = this.elements.slice()\n      const selected = elements[this.activeIndex || 0]\n      selected.left = this.startSelected.centerX - this.startSelected.width * scale / 2\n      selected.top = this.startSelected.centerY - this.startSelected.height * scale / 2\n      selected.width = this.startSelected.width * scale\n      selected.height = this.startSelected.height * scale\n      // elements[this.activeIndex || 0].scale = this.startSelected.scale * scale\n      store.commit('setElements', elements)\n    },\n    // 旋转绑定函数\n    handleRotate(e) {\n      console.log('handleRotate')\n      const start = this.startTouches[0]\n      const end = e.touches[0]\n      const center = {\n        x: this.startSelected.centerX,\n        y: this.startSelected.centerY\n      }\n      const startLength = Math.sqrt((center.x - start.x) ** 2 + (center.y - start.y) ** 2)\n      const endLength = Math.sqrt((center.x - end.x) ** 2 + (center.y - end.y) ** 2)\n      const radian = this.convert2Radian(start, end, center)\n      const scale = endLength / startLength\n      const elements = this.elements.slice()\n      const selected = elements[this.activeIndex]\n      // 旋转\n      selected.rotate = this.startSelected.rotate - radian\n      // 缩放\n      if (selected.type === 'text') {\n        selected.left = this.startSelected.centerX - this.startSelected.size * this.startSelected.data.length * scale / 2\n        selected.top = this.startSelected.centerY - this.startSelected.size * scale / 2\n        selected.size = this.startSelected.size * scale\n      }\n      if (selected.type === 'sticker') {\n        selected.left = this.startSelected.centerX - this.startSelected.width * scale / 2\n        selected.top = this.startSelected.centerY - this.startSelected.height * scale / 2\n        selected.width = this.startSelected.width * scale\n        selected.height = this.startSelected.height * scale\n      }\n      store.commit('setElements', elements)\n    },\n    // 删除绑定函数\n    handleDelete() {\n      wx.showModal({\n        title: '提示',\n        content: '确认删除元素吗',\n        success(res) {\n          if (res.confirm) {\n            store.commit('deleteActiveELement')\n          }\n        }\n      })\n    },\n    initSelectStatus() {\n      //\n    },\n    /**\n     * 将坐标转化为旋转前的坐标\n     * 用于碰撞检测\n     * @param { Number } x\n     * @param { Number } y\n     * @param { Number } ox 原点坐标x\n     * @param { Number } oy 原点坐标y\n     * @param { Number } r 旋转弧度\n     * @return { Object } {left, top} 旋转前的坐标\n     */\n    convert2unrotatedSize(x, y, ox, oy, r) {\n      x = x - ox\n      y = y - oy\n      return {\n        left: x * Math.cos(-r) - y * Math.sin(-r) + ox,\n        top: x * Math.sin(-r) + y * Math.cos(-r) + oy\n      }\n    },\n    // 初始化画布\n    async initCanvas() {\n      const query = this.createSelectorQuery()\n      query\n        .select('#canvas')\n        .fields({ node: true, size: true })\n        .exec(async res => {\n          const canvas = res[0].node\n          const ctx = canvas.getContext('2d')\n          store.commit('setCanvas', canvas)\n          store.commit('setCtx', ctx)\n\n          // TODO：功能未完善\n          // await loadImage('/images/icon-move.png', this.canvas).then(res => {\n          //   console.log('this', this)\n          //   this.image.move = res\n          // })\n          // await loadImage('/images/icon-scale.png', this.canvas).then(res => {\n          //   this.image.scale = res\n          // })\n          // await loadImage('/images/icon-delete.png', this.canvas).then(res => {\n          //   this.image.delete = res\n          // })\n          const imageRotate = await loadImage('/images/icon-rotate.png', this.canvas)\n          this.image.rotate = imageRotate\n\n          this.canvas.width = res[0].width * this.dpr\n          this.canvas.height = res[0].height * this.dpr\n          this.ctx.scale(this.dpr, this.dpr)\n          this.drawGrid()\n        })\n    },\n    /**\n     * 已知2点坐标，求旋转弧度\n     * @param { Object } s 开始坐标\n     * @param { Object } e 结束坐标\n     * @param { Object } c 原点坐标\n     * @return { Number } 旋转弧度\n     */\n    convert2Radian(s, e, c) {\n      const sx = s.x - c.x\n      const sy = s.y - c.y\n      const ex = e.x - c.x\n      const ey = e.y - c.y\n      const rs = Math.atan2(sy, sx)\n      const re = Math.atan2(ey, ex)\n      return rs - re\n    },\n    initController(ele) {\n      const cs = this.convert2ControllerSize(ele)\n      this.ctx.save()\n      this.ctx.strokeStyle = '#eee'\n      this.ctx.translate(cs.centerX, cs.centerY)\n      this.ctx.rotate(cs.rotate)\n      // this.ctx.scale(activeElement.scale, activeElement.scale)\n      this.ctx.setLineDash([10, 5], 5)\n      this.ctx.strokeRect(cs.left - cs.centerX, cs.top - cs.centerY, cs.width, cs.height)\n      // 绘制控制点-旋转\n      this.ctx.drawImage(this.image.rotate, cs.left + cs.width - 10 - cs.centerX, cs.top + cs.height - 10 - cs.centerY, 20, 20)\n      // TODO：功能未完善\n      // // 绘制控制点-移动\n      // this.ctx.drawImage(this.image.move, cs.left - 10 - cs.centerX, cs.top - 10 - cs.centerY, 20, 20)\n      // // 绘制控制点-缩放\n      // this.ctx.drawImage(this.image.scale, cs.left - 10 - cs.centerX, cs.top + cs.height - 10 - cs.centerY, 20, 20)\n      // // 绘制控制点-删除\n      // this.ctx.drawImage(this.image.delete, cs.left + cs.width - 10 - cs.centerX, cs.top - 10 - cs.centerY, 20, 20)\n      this.ctx.restore()\n    },\n    // 绘制网格做地图\n    drawGrid() {\n      this.ctx.save()\n      const lineNums = 3\n      const cWidth = this.ctx.canvas.width / this.dpr\n      // const cHeight = this.ctx.canvas.height\n      const lineGap = cWidth / lineNums\n      this.ctx.strokeStyle = '#ccc'\n      this.ctx.setLineDash([5, 5])\n      // \b\b绘制x轴\n      for (let i = 0; i <= lineNums; i++) {\n        this.ctx.beginPath()\n        this.ctx.moveTo(0, lineGap * i)\n        this.ctx.lineTo(cWidth, lineGap * i)\n        this.ctx.stroke()\n      }\n      // 绘制y轴\n      for (let i = 0; i <= lineNums; i++) {\n        this.ctx.beginPath()\n        this.ctx.moveTo(lineGap * i, 0)\n        this.ctx.lineTo(lineGap * i, cWidth)\n        this.ctx.stroke()\n      }\n      this.ctx.restore()\n    }\n  },\n  async ready() {\n    await this.initCanvas()\n  }\n})\n</script>\n\n<style lang=\"stylus\">\n.playboard\n  position relative\n  width 100vw\n  height 100vw\n  background #f8f8f8\n.canvas\n  width 100vw\n  height 100vw\n.icon-add\n  position absolute\n  width 160rpx\n  height 160rpx\n  left 50%\n  top 50%\n  margin-top -80rpx\n  margin-left -80rpx\n</style>\n\n<script type=\"application/json\">\n  {\n    \"component\": true\n  }\n</script>\n","// removed by extractor","// removed by extractor","// removed by extractor"],"sourceRoot":""}